/ Experimentation Zone!
/ This is not used actually used in the app and is just a quick scratchpad of ideas on API design of a Resource polymer-element

/ 
/ Resource
/ --------
/ 
link rel="import" href="polymer-xhr"

polymer-element name="h-resource-item" attributes="item-id resource"
  coffee:
    Polymer "h-resource-item",
      'item-id': undefined
      resource: undefined

      ready: ->
      'item-idChanged': (itemId)->


polymer-element name="h-resource--http" attributes="config"
  template
    polymer-xhr#xhr

  coffee:
    defaultActionMethod = (action)->
      (actionOptions, done)->
        xhr.request _merge$Options action, itemId

    Polymer 'h-resource--http',
      # Config object to be customized
      # 
      config:
        $: {}

      ready: ->
        config = (@config or= {$:{}})
        config.$ or= {}

      _getFnValue: (configValue, fnOptions)->
        # If config value is a function, call it passing action optionsself
        if (typeof configValue) is 'function'
          try configValue.call @config, fnOptions
        # ... otherwise, use the config value as is
        else
          configValue

      _getConfigValue: (action, configKey, actionOptions)->
        # Action specific config
        val = @_getFnValue @config[action]?[configKey], actionOptions
        # Resource specific config IF NOT specified no action specific config
        val ?= @_getFnValue @config.$?[configKey], actionOptions

      _merge$Options: (action, actionOptions)->
        options = {}
        for configKey in ['url','method','headers','params','body']
          options[configKey] = _getConfigValue action, configKey, actionOptions
        options

      get: (itemId, callback)->
        config = createConfigFor 'get'
        xhr.request config, itemId

      create: (hash)->
        xhr.request _merge$Options action, itemId
        
      update: ->
      delete: ->
      query: ->

/ 
/ Define a Resource
/ -----------------
/ 
link rel="import" href="r-resource--http"
polymer-element [ name="r-todos"
                  extends="r-resource--http" ]
  coffee:
    Polymer 'r-todos',
      config:
        $:
          url: '/todos/'
        create: {}
        update: {}
        delete: {}
        get:
          # An example of an action overriding default behavior.
          # In this case, this function is used to determine `get()` request urls.
          # This function builds off of what the parent says.
          url: (id, options, parent)->
            "#{parent id, options}/#{id}"
        query:
          url: (id, options, parent)->
            "#{parent id, options}/"


link rel="import" href="r-resource--http"
polymer-element [ name="r-todos"
                  extends="r-resource--http" ]
  coffee:
    Polymer 'r-todos',
      url: '/todos/'
      get: (id)->

/ 
/ Define a convenience Resource specific accessors
/ ------------------------------------------------
/ 
polymer-element [ name="r-todo-item"
                  extends="r-resource-item"
                  resource="$.resource"
                  noscript="" ]
  template
    r-todos#resource

polymer-element [ name="r-todo-collection"
                  extends="r-resource-item"
                  resource="$.resource"
                  noscript="" ]
  template
    r-todos#resource

link rel="import" href="h-resource-collection"
link rel="import" href="h-resource-item"
link rel="import" href="r-myresource"

polymer-element name="v-app" noscript=""
  template
    / Instantiates a Resource (HTTP, LocalStorage, WebSocket, or whatever)
    r-todos#todos
    / Retrieves a resource item from the specified resource
    r-resource-item [ resource="{{ $.todos }}"
                      item-id="{{ selectedTodoId }}" ]
    / Retrieves a collection of resource items from the specified resource
    r-resource-collection [ resource="{{ $.todos }}"
                         query="{{ {done:doneFilter, text:textFilter} }}" ]


    / Retrieves a resource item from a predetermined resource
    r-todos-item item-id="{{ selectedTodoId }}"
    / Retrieves a collection of resource items from a predetermined resource
    r-todos-collection query="{{ {done:doneFilter, text:textFilter} }}"

    / 
    / Resource usage examples
    / =======================
    / 
    / The following are examples of using Resources to...
    / 1. Create an item
    / 2. Get an item
    / 3. Query a collection of items
    / 
    / ### API Experiment - Passing the Resource
    / 
    / How does one specify the resource to be used to create or retrieve item(s)?
    / Can we do it in 
    / How should the resource be passed to '<resource-item>' and
    / '<resource-collection>'?  3 Possible ways are presented for each example.
    / 
    / 1. By Property
    / 2. By ID Reference Property
    / 3. By ID Reference content
    / 

    / 
    / Resource Collection
    / -------------------
    / 
    / Retrieves many resource items based on `query`.
    /
    / 
    / Passing the resource to use as a property
    h-resource-collection [ resource="{{ $.myresource }}"
                            query="{{ {done:doneFilter, text:textFilter} }}" ]

    / Passing the resource to use as a refid.
    / Resource will be found using `host.$[this.resource.refid]`
    h-resource-collection [ resource-refid="myresource"
                            query="{{ {done:doneFilter, text:textFilter} }}" ]

    / Passing the resource to use as a refid (child element).
    / Resource will be found using `host.$[this.resource.refid]`
    h-resource-collection query="{{ {done:doneFilter, text:textFilter} }}"
      resource-refid myresource

    / 
    / Resource Item
    / -------------
    / 
    / Retrieves one resource items based on `item-id` OR creates a new resource.
    / 

    / 
    / ### Creating an item
    / 
    / NOT specifying an `item_id`, creates a new item.
    / 
    h-resource-item#newItem resource="{{ $.myresource }}"

    / 
    / ### Retrieving an item
    / 
    / Specifying an `item_id`, will retrieve the item.
    / 

    / Passing the resource to use as a property
    h-resource-item [ resource="{{ $.myresource }}"
                      itemId="{{ id }}" ]

    / Passing the resource to use as a refid.
    / Resource will be found using `host.$[this.resource.refid]`
    h-resource-item [ resource-refid="myresource"
                      itemId="{{ id }}" ]

    / Passing the resource to use as a refid (child element).
    / Resource will be found using `host.$[this.resource.refid]`
    h-resource-item itemId="{{ id }}"
      resource-refid myresource

