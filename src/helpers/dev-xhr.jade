//- dev-xhr is an extension of polymer-xhr that either forwards
//- requests to polymer-xhr OR, if in a dev environment, to a local
//- handler.  This allows for easier testing and mocking interactions
//- with external services.

//- Example:
//-     <polymer-xhr is="dev-xhr" id="xhr"></polymer-xhr>
//-     <script>
//-     ...
//-     this.$.xhr.request({url: url, params: params, callback: callback});
//-     ...
//-     </script>

link( href='/vendor/polymer-all/polymer-elements/polymer-ajax/polymer-xhr.html', rel='import' )

polymer-element( name='dev-xhr', extends='polymer-xhr' )
  template
    style.
      @host {
        * {
          display: none;
        }
      }

  :coffeescript
    jsonout = (obj)-> try JSON.stringify obj
    jsonin = (obj)-> try JSON.parse jsonout obj

    mock =
      users:
        a:
          fname: 'Peter'
          lname: 'Wong'
          pass: 'a'

    mockHandlerMap =
      # Example of a passthrough endpoint
      '/passthrough': 'passthrough'

      '/users/login': (url, body, done)->
        result =
          status: 400
          data:
            reason: "User and/or Password FAIL"

        if req = jsonin body
          if user = mock.users[req.user]
            if user.pass is user.pass
              result =
                status: 200
                data: {}

        done result.status, jsonout result.data

    Polymer 'dev-xhr',
      request: (options)->
        url = options.url
        method = options.method or 'GET'
        params = @toQueryString options.params

        if params and method is 'GET'
          url += 
            if url.indexOf('?') > 0 then '&'
            else '?'
          url += params

        for mockRx, mockHandler of mockHandlerMap when new RegExp(mockRx).test url
          if mockHandler is 'passthrough'
            @super [options]
          else
            mockHandler url, (options.body or params), (status, resp)->
              options.callback.call null, resp, {status, resp}
          return

        @super [options]