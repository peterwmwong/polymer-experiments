link rel="import" href="v-todo-input.html"
link rel="import" href="../resources/todo-resource.html"
link rel="import" href="../helpers/h-ios-overflow-scroll.html"

polymer-element name="v-todo-item"

  template
    link rel="stylesheet" href="v-todo-item.css"

    todo-resource-item item_id="{{ todo_id }}" item="{{ todo }}"

    #btnBack on-tap="{{onClose}}" touch-action="none"
      | &lt;

    #wrap
      h-ios-overflow-scroll

      #panelContainer
        / TODO: Remove 2 layers of wraps
        .basicPanel
          input#editTodoText [ is="v-todo-input"
                               value="{{ todo.text }}"
                               on-blurred="{{onBlur}}" ]

        / TODO: extract into new element
        .detailedPanelContainer
          #detailedPanel
            .header
              | NOTES

            .section
              textarea.notes [ value="{{ todo.notes }}"
                               rows="7"
                               placeholder="Leave yourself a note..."
                               on-tap="{{onNotesFocus}}"
                               touch-action="none" ]

  coffee:
    # TODO: Reassess Web Animations
    #       We're doing a lot of adhoc coding of transitions.
    #       Some in CSS. Some in JS. Let's unify.
    ANIMATION_DURATION_MS = 250

    Polymer 'v-todo-item',
      is_open: false
      todo_id: undefined
      todo: undefined
      element_to_expand_from: undefined

      open: (options)->
        return if @is_open
        @is_open = true

        # If no options, create a new todo
        {@todo_id, @element_to_expand_from} = options or {}
        @$.editTodoText.blur()
        @.style.zIndex = 999

        # Animation before start
        @$.panelContainer.setAttribute 'style',
          "-webkit-transform: translate3d(0,#{@getTranslateY @element_to_expand_from}px,0);"

        requestAnimationFrame =>
          # Animation start
          @$.panelContainer.setAttribute 'style',
            '-webkit-transform: translate3d(0,0,0);'
          @$.btnBack.classList.add 'editing'
          @$.wrap.classList.add 'editing'

        # HACK(iOS): Delayed focus avoids a flicker
        setTimeout (=>@$.editTodoText.focus()), ANIMATION_DURATION_MS*1.5

      ###
      Returns the y-coordinate to animate to and from.
      ###
      getTranslateY: (element)->
        return 0 unless element
        # TODO: use a better "get global position of element"
        element.offsetTop - element.offsetParent.offsetTop + 64

      # HACK(iOS): Fix auto scroll on input focus.  It overscrolls everything
      #            up, causing the cancel/back button to go offscreen.
      onNotesFocus: ->
        @asyncMethod => window.scrollTo 0,0

      onBlur: (ev,fromKeyboard)->
        @onClose() if fromKeyboard

      onClose: ->
        return unless @is_open
        @is_open = false

        @todo.$.save() if not @todo.$.isNew or @todo.text

        # Animation start
        @$.panelContainer.setAttribute 'style',
          "-webkit-transform: translate3d(0,#{@getTranslateY @element_to_expand_from}px,0);"
        @$.detailedPanel.setAttribute 'style',
          '-webkit-transform: translate3d(0,-100%,0);'
        @$.wrap.classList.add 'bgout'
        @$.btnBack.classList.remove 'editing'

        setTimeout (=>
          @$.panelContainer.setAttribute 'style', ''
          @$.detailedPanel.setAttribute 'style', ''

          # HACK(iOS/Polymer): Fix blink when adding/removing 'editing' class
          #                    using case statement Polymer/ExpressionSyntax
          @$.wrap.classList.remove 'editing'
          @$.wrap.classList.remove 'bgout'
          @$.wrap.style.backgroundColor = ''
          @.style.zIndex = ''
        ), ANIMATION_DURATION_MS
