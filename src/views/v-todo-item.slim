link rel="import" href="v-todo-input.html"
link rel="import" href="../helpers/h-ios-overflow-scroll.html"

polymer-element name="v-todo-item" attributes="todo"

  template
    link rel="stylesheet" href="v-todo-item.css"

    #btnBack [ touch-action="none"
               on-click="onEndEditingTodo"
               on-pointerup="onEndEditingTodo" ]
      | &lt;

    #wrap
      h-ios-overflow-scroll

      h-resource-item item="{{ todo.model }}" on-change="onTodoChange"

      #panelContainer
        / TODO: Remove 2 layers of wraps
        .basicPanel
          input#editTodoText [ is="v-todo-input"
                               value="{{ todo.model.text }}"
                               on-blurred="onBlur"
                               on-keypres="onKeypress" ]

        / TODO: extract into new element
        .detailedPanelContainer
          #detailedPanel
            .header
              | NOTES

            .section
              textarea.notes [ value="{{ todo.model.notes }}"
                               rows="7"
                               placeholder="Leave yourself a note..."
                               on-click="onNotesFocus" ]

  coffee:
    # TODO: Reassess Web Animations
    #       We're doing a lot of adhoc coding of transitions.
    #       Some in CSS. Some in JS. Let's unify.
    ANIMATION_DURATION_MS = 250

    Polymer 'v-todo-item',
      todo: undefined

      todoChanged: ->
        if @todo
          @onStartEditingTodo()
          # HACK(iOS): Delayed focus avoids a flicker
          setTimeout (=>@$.editTodoText.focus()), ANIMATION_DURATION_MS*1.5

      ###
      Returns the y-coordinate to animate to and from.
      ###
      getTranslateY: ->
        if @todo.element
          @todo.element.offsetTop - @todo.element.parentNode.scrollTop
        else 0

      onTodoChange: ->
        @todo.model.save() if @todo?.model?.$status isnt 'new'

      # HACK(iOS): Fix auto scroll on input focus.  It overscrolls everything 
      #            up, causing the cancel/back button to go offscreen.
      onNotesFocus: ->
        @asyncMethod => window.scrollTo 0,0

      onBlur: (ev,fromKeyboard)->
        @onEndEditingTodo() if fromKeyboard

      onStartEditingTodo: (e)->
        @$.editTodoText.blur()

        @.style.zIndex = 999
        # Animation before start
        @$.panelContainer.setAttribute 'style', "-webkit-transform: translate3d(0,#{@getTranslateY()}px,0);"

        requestAnimationFrame =>
          # Animation start
          @$.panelContainer.setAttribute 'style', '-webkit-transform: translate3d(0,0,0);'
          @$.btnBack.classList.add 'editing'
          @$.wrap.classList.add 'editing'

      onEndEditingTodo: ->
        # Animation start
        @$.panelContainer.setAttribute 'style', "-webkit-transform: translate3d(0,#{@getTranslateY()}px,0);"
        @$.detailedPanel.setAttribute 'style', '-webkit-transform: translate3d(0,-100%,0);'
        @$.wrap.classList.add 'bgout'
        @$.btnBack.classList.remove 'editing'

        setTimeout (=>
          @$.panelContainer.setAttribute 'style', ''
          @$.detailedPanel.setAttribute 'style', ''

          # HACK(iOS/Polymer): Fix blink when adding/removing 'editing' class 
          #                    using case statement Polymer/ExpressionSyntax 
          @$.wrap.classList.remove 'editing'
          @$.wrap.classList.remove 'bgout'
          @$.wrap.style.backgroundColor = ''
          @.style.zIndex = ''
          @fire 'collapse', @todo
        ), ANIMATION_DURATION_MS
