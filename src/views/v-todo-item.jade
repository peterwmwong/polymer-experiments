polymer-element( name='v-todo-item', \attributes='item' )
  link( rel='import', href='v-todo-input.html' )

  template
    link( rel='stylesheet', href='v-todo-item.css' )

    #btnBack( on-click="onEndEditingTodo" )
      | &lt;

    #wrap( on-click='onStartEditingTodo' )

      #panelContainer

        .basicPanel
          .editTodoTextWrap
            input#editTodoText( is='v-todo-input', value='{{ item.text }}', on-focused='onStartEditingTodo', on-blurred='onBlur', on-keypres='onKeypress' )
            a.editTodoTextReadOnly
              | {{ item.text }}

        //- TODO: extract into new element
        .detailedPanelContainer
          #detailedPanel
            .header NOTES
            .section
              textarea.notes( value='{{ item.notes }}', rows='7', placeholder='Leave yourself a note...')


  :coffeescript
    # TODO: Reassess Web Animations
    #       We're doing a lot of adhoc coding of transitions.
    #       Some in CSS. Some in JS. Let's unify.
    ANIMATION_DURATION_MS = 250

    Polymer 'v-todo-item',
      item: undefined
      editing: false

      itemChanged: ->
        if @item.$new
          @onStartEditingTodo()
          setTimeout (=>@$.editTodoText.focus()), ANIMATION_DURATION_MS

      ready: ->
        @editing = false
        @boundPreventOverscroll = => @preventOverscroll()

      # HACK(iOS): When a user attempts to scroll an overflow:scroll elements 
      #            passed it's limits (top or bottom), iOS then scrolls the 
      #            document.  This doesn't work for modals, as the user will be
      #            scrolling stuff below the modal... and that's just weird.
      preventOverscroll: (e)->
        # TODO: polymer/CustomElement/something is wrapping elements in a way
        #       that scrollTop can't be set!
        el = @$.wrap.impl
        startTopScroll = el.scrollTop

        if startTopScroll <= 0
          el.scrollTop = 1

        if startTopScroll + el.offsetHeight >= el.scrollHeight
          el.scrollTop = el.scrollHeight - el.offsetHeight - 1
        return

      onBlur: (ev,fromKeyboard)->
        @onEndEditingTodo() if fromKeyboard

      onStartEditingTodo: (e)->
        # HACK(iOS): Fix auto scroll on input focus.  It mispositions up fixed
        #            positioned items causing weird visual defects (banner not
        #            at the top, black bg doesn't cover completely)
        savedScrollY = window.scrollY
        window.scrollTo 0, savedScrollY
        @asyncMethod =>
          window.scrollTo 0, savedScrollY

        unless @editing
          @editing = true
          # Animation before start
          @$.panelContainer.setAttribute 'style', "-webkit-transform: translate3d(0,#{@offsetTop - 48 - document.body.scrollTop}px,0);"

          requestAnimationFrame =>
            # Animation start
            @$.panelContainer.setAttribute 'style', '-webkit-transform: translate3d(0,0,0);'
            @$.btnBack.classList.add 'editing'
            @$.wrap.classList.add 'editing'
            @$.wrap.addEventListener 'touchstart', @boundPreventOverscroll, true

      onEndEditingTodo: ->
        @fire 'collapse', @item

        # Animation start
        @editing = false
        @$.panelContainer.setAttribute 'style', "-webkit-transform: translate3d(0,#{@offsetTop - 48 - document.body.scrollTop}px,0);"
        @$.detailedPanel.setAttribute 'style', '-webkit-transform: translate3d(0,-100%,0);'
        @$.wrap.classList.add 'bgout'
        @$.wrap.removeEventListener 'touchstart', @boundPreventOverscroll, true
        @$.btnBack.classList.remove 'editing'

        setTimeout (=>
          @$.panelContainer.setAttribute 'style', ''
          @$.detailedPanel.setAttribute 'style', ''

          # HACK(iOS/Polymer): Fix blink when adding/removing 'editing' class 
          #                    using case statement Polymer/ExpressionSyntax 
          @$.wrap.classList.remove 'editing'
          @$.wrap.classList.remove 'bgout'
          @$.wrap.style.backgroundColor = ''
        ), ANIMATION_DURATION_MS
