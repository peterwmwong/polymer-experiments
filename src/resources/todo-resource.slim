script src="../../bower_components/node-uuid/uuid.js"

/ Singleton storage to be shared by all <todo-resource-items> and
/ <todo-resource-collections>
polymer-element name='todo-resource-storage' attributes='items'
  coffee:
    items = JSON.parse window.localStorage.getItem('ioi-store') or '{}'
    defineId = (item, id)->
      # Make id read-only
      Object.defineProperty item, 'id',
        enumerable: true
        writable: false
        value: id
      return

    defineId item, id for id,item of items

    Polymer 'todo-resource-storage',
      items: items
      defineId: defineId
      save: ->
        #TODO: Make id read-only
        window.localStorage.setItem 'ioi-store', JSON.stringify items
        return

polymer-element name='todo-resource-item' attributes='item_id item'
  template
    todo-resource-storage#storage items="{{ storedTodos }}"

  coffee:
    Polymer 'todo-resource-item',

      # Input
      item_id: undefined

      # Output
      item: undefined

      storedTodos: undefined

      enteredView: ->
        @_itemSpy = new CompoundPathObserver (-> @save() unless @isNew), @
        for attr in ['text','done','notes']
          @_itemSpy.addPath @, Path.get("item.#{attr}") 
        @_itemSpy.start()
        @_updateItem()
        return

      leftView: ->
        @_itemSpy.close()
        return

      item_idChanged: ->
        @_updateItem()
        return

      storedTodosChanged: ->
        @_updateItem()
        return

      save: ->
        if @isNew
          if @item
            @isNew = false
            @item_id = uuid()
            @$.storage.defineId @item, @item_id

            # TODO: Add test and re-generate an id loop with cutoff
            @storedTodos[@item_id] = @item
            @_saveToStorage()
        else if @item and (@storedTodos[@item_id] is @item)
          @_saveToStorage()
        return

      _saveToStorage: ->
        @$.storage.save()
        return

      _updateItem: ->
        # New item?
        unless @item_id?
          @item = {}
          @isNew = true
        else
          @item = undefined
          @isNew = false
          @item = @storedTodos[@item_id]
        return


polymer-element name='todo-resource-collection' attributes='query items'
  template
    todo-resource-storage#storage items="{{ storedTodos }}"

  coffee:
    Polymer 'todo-resource-collection',

      # Input
      query: {}

      # Output
      items: []

      # Storage
      storedTodos: undefined

      enteredView: ->
        @_querySpy = new CompoundPathObserver @_updateItems, @
        for attr in ['text','done','notes']
          @_querySpy.addPath @, Path.get("query.#{attr}") 
        @_querySpy.start()
        return

      leftView: ->
        @_querySpy.close()
        @_storedTodosSpy?.close()
        return

      storedTodosChanged: ->
        if @storedTodos
          @_storedTodosSpy?.close()
          @_storedTodosSpy = new ObjectObserver @storedTodos, @_updateItems, @
        @_updateItems()
        return

      _testItem: (item)->
        {text,done,notes} = @query
        (not text? or -1 < item.text.indexOf text) and
          (not notes? or -1 < item.notes.indexOf notes) and
          (not done? or item.done is done)

      _updateItems: ->
        return unless @query? and @storedTodos?
        @items = (item for id,item of @storedTodos when @_testItem item)
        return
