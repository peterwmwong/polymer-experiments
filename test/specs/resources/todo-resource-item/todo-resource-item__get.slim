== html_test 'resources/todo-resource.html'

  / Setup
  / -----
  coffee:
    window.localStorage.removeItem 'ioi-store'
    window.localStorage.setItem 'ioi-store', JSON.stringify
      'a': {id: 'a', text: 'one',   notes: 'one notes',   done: true}
      'b': {id: 'b', text: 'two',   notes: 'two notes',   done: false}
      'c': {id: 'c', text: 'three', notes: 'three notes', done: true}

  polymer-element name="t-test"
    template
      todo-resource-item item_id="{{ item_id }}" item="{{ todo }}"
      
    coffee:
      Polymer 't-test',
        item_id: 'b'

        # Retrieved todo will be written to @todo
        todo: undefined

        # Begin test when todo has been retrieved
        todoChanged: ->
          return unless @todo
          unless @testStarted
            @testStarted = true
            @startTest()

        startTest: ->
          DESCRIBE = 'Given @item_id,'
          expect(@todo, "#{DESCRIBE} retrieves and writes to @todo")
            .to.deep.equal
              id: 'b'
              text: 'two'
              notes: 'two notes'
              done: false

          DESCRIBE = 'When @item_id changes,'
          @item_id = 'c'

          @async ->
            expect(@todo, "#{DESCRIBE} retrieves and writes to @todo")
              .to.deep.equal
                id: 'c'
                text: 'three'
                notes: 'three notes'
                done: true

            expect(@item_id, "#{DESCRIBE} when @item_id changes, @item_id stays the same")
              .to.equal 'c'

            DESCRIBE = 'Given @item_id is bogus,'
            @item_id = 'BOGUS'

            @async ->
              expect(@todo, "#{DESCRIBE} writes `undefined` to @todo")
                .to.equal undefined

              expect(@item_id, "#{DESCRIBE} @item_id stays the same")
                .to.equal 'BOGUS'

              done()
