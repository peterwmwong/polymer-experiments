== html_test 'resources/todo-resource.html'

  / Setup
  / -----
  coffee:
    window.localStorage.removeItem 'ioi-store'
    window.localStorage.setItem 'ioi-store', JSON.stringify
      'a': {id: 'a', text: 'one',   notes: 'one notes',   done: true}
      'b': {id: 'b', text: 'two',   notes: 'two notes',   done: false}
      'c': {id: 'c', text: 'three', notes: 'three notes', done: true}

  polymer-element name="t-test"
    template
      todo-resource-item#todoItem item_id="{{ item_id }}" item="{{ todo }}"
      
    coffee:
      Polymer 't-test',
        item_id: 'b'

        # Retrieved todo will be written to @todo
        todo: undefined

        # Begin test when todo has been retrieved
        todoChanged: ->
          return unless @todo
          debugger
          unless @testStarted
            @testStarted = true
            @startTest()

        startTest: ->
          DESCRIBE = 'When retrieving an item,'
          expect(@todo, "#{DESCRIBE} @todo is desired item")
            .to.deep.equal {id: 'b', text: 'two', notes: 'two notes', done: false}

          expect(@$.todoItem.isNew, "#{DESCRIBE} @isNew is true")
            .to.equal false

          DESCRIBE = 'When trying to change the @id attribute,'
          @todo.id = 'SHOULDNOTLAST'
          expect(@todo.id, "#{DESCRIBE} @id does NOT change")
            .to.equal 'b'

          DESCRIBE = 'When trying to change the @id attribute of a saved new item,'
          @item_id = undefined
          @async ->
            @item = text: 'three', notes: 'three notes', done: true
            @$.todoItem.save()

            @async ->
              expect(@todo.id).to.be.a 'string'
              originalId = @todo.id
              @todo.id = 'SHOULDNOTLAST'
              expect(@todo.id).to.equal originalId
              done()

