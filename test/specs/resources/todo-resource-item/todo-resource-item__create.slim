== html_test 'resources/todo-resource.html'

  / Setup
  / -----
  coffee:
    window.localStorage.removeItem 'ioi-store'
    window.localStorage.setItem 'ioi-store', JSON.stringify
      'a': {id: 'a', text: 'one',   notes: 'one notes',   done: true}
      'b': {id: 'b', text: 'two',   notes: 'two notes',   done: false}
      'c': {id: 'c', text: 'three', notes: 'three notes', done: true}

  polymer-element name="t-test"
    template
      todo-resource-item#todoItem item_id="{{ item_id }}" item="{{ todo }}"
      
    coffee:
      Polymer 't-test',
        item_id: undefined

        # Retrieved todo will be written to @todo
        todo: undefined

        # Begin test when todo has been retrieved
        todoChanged: ->
          return unless @todo
          unless @testStarted
            @testStarted = true
            @startTest()

        startTest: ->
          DESCRIBE = 'When @item_id is undefined (new item),'
          @item_id = undefined

          @async ->
            expect(@todo, "#{DESCRIBE} @todo is {}")
              .to.deep.equal {}

            expect(@$.todoItem.isNew, "#{DESCRIBE} @isNew is true")
              .to.equal true

            DESCRIBE = 'After save() was called,'
            @todo.text = 'four'
            @todo.notes = 'four notes'
            @todo.done = true
            @$.todoItem.save()

            @async ->
              storageValue = window.localStorage.getItem 'ioi-store'
              new_item_id = @item_id
              expected =
                'a': {id: 'a', text: 'one',   notes: 'one notes', done: true}
                'b': {id: 'b', text: 'two',   notes: 'two notes', done: false}
                'c': {id: 'c', text: 'three', notes: 'three notes', done: true}
              expected[new_item_id] =
                text: 'four', notes: 'four notes', done: true, id: new_item_id

              console.log JSON.stringify JSON.parse(storageValue), undefined, 2
              console.log JSON.stringify expected, undefined, 2
              expect( JSON.parse(storageValue), "#{DESCRIBE} @todo is written to localStorage")
                .to.deep.equal expected

              expect(@$.todoItem.isNew, "#{DESCRIBE} @isNew is false")
                .to.equal false

              expect(@item_id, "#{DESCRIBE} @item_id is updated")
                .to.be.a('string')

              DESCRIBE = 'After save() was called again,'
              @$.todoItem.save()

              @async ->
                storageValue = window.localStorage.getItem 'ioi-store'

                expected =
                  'a': {id: 'a', text: 'one',   notes: 'one notes', done: true}
                  'b': {id: 'b', text: 'two',   notes: 'two notes', done: false}
                  'c': {id: 'c', text: 'three', notes: 'three notes', done: true}
                expected[new_item_id] =
                  {text: 'four', notes: 'four notes', done: true, id: new_item_id}

                expect( JSON.parse(storageValue), "#{DESCRIBE} localStorage is as it was")
                  .to.deep.equal expected

                expect(@$.todoItem.isNew, "#{DESCRIBE} @isNew is still false")
                  .to.equal false

                expect(@item_id, "#{DESCRIBE} @item_id doesn't change")
                  .to.equal new_item_id
                  
                DESCRIBE = 'When item_id changes,'
                @item_id = 'b'

                @async ->
                  expect(@$.todoItem.isNew, "#{DESCRIBE} @isNew is false")
                    .to.equal false

                  expect(@todo, "#{DESCRIBE} @item updated")
                    .to.deep.equal
                      id: 'b'
                      text: 'two'
                      notes: 'two notes'
                      done: false

                  expect(@item_id, "#{DESCRIBE} @item_id is correct")
                    .to.equal 'b'

                  done()

