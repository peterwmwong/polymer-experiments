== html_test 'resources/todo-resource.html'

  / Mocks/Helpers
  / -------------
  script src='../../../helpers/MockNote.js'

  polymer-element name="t-test"
    template
      todo-resource-item#todoItem item_id="{{ item_id }}" item="{{ todo }}"
      
    coffee:
      # Setup
      # -----
      localStorage.removeItem 'ioi-store'
      note1 = @MockNote()
      note2 = @MockNote()
      note3 = @MockNote()
      localStorage.setItem 'ioi-store', JSON.stringify @AllMockNotes

      Polymer 't-test',

        # Test
        # ----
        todoChanged: ->
          return if not @todo or @testStarted
          @testStarted = true

          @item_id = undefined
          @async ->
            expect(@todo).to.deep.equal {}
            expect(@$.todoItem.isNew).to.equal true

            @todo.text = 'four'
            @todo.notes = 'four notes'
            @todo.done = true
            @$.todoItem.save()

            @async ->
              allNotes = {}
              allNotes[ note1.id ] = note1
              allNotes[ note2.id ] = note2
              allNotes[ note3.id ] = note3
              allNotes[ @item_id ] = @todo

              expect(JSON.parse localStorage.getItem 'ioi-store').to.deep.equal allNotes
              expect(@$.todoItem.isNew).to.equal false
              expect(@item_id).to.be.a 'string'

              newItemId = @item_id
              @$.todoItem.save()
              @async ->
                expect(JSON.parse localStorage.getItem 'ioi-store').to.deep.equal allNotes
                expect(@$.todoItem.isNew).to.equal false
                expect(@item_id).to.equal newItemId
                  
                @item_id = note2.id
                @async ->
                  expect(@$.todoItem.isNew).to.equal false
                  expect(@todo).to.deep.equal note2
                  expect(@item_id).to.equal note2.id
                  
                  done()
