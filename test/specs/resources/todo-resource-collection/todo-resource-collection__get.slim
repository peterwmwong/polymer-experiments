== html_test 'resources/todo-resource.html'

  / Setup
  / -----
  coffee:
    window.localStorage.removeItem 'ioi-store'
    window.localStorage.setItem 'ioi-store', JSON.stringify
      'a': {text: 'one', done: true}
      'b': {text: 'two', done: false}
      'c': {text: 'three', done: true}

  polymer-element name="t-test"
    template
      todo-resource-collection query="{{ query }}" items="{{ todos }}"
      
    coffee:
      Polymer 't-test',
        query:
          text: 't'

        # Retrieved todos will be written to @todos
        todos: undefined

        # Begin test when todo has been retrieved
        todosChanged: ->
          return unless @todos?.length and not @testStarted
          @testStarted = true
          @startTest()

        startTest: ->
          DESCRIBE = 'Given @query,'
          debugger
          expect(@todos, "#{DESCRIBE} retrieves and writes to @todos")
            .to.deep.equal [
              {id: 'b', text: 'two', done: false}
              {id: 'c', text: 'three', done: true}
            ]

          DESCRIBE = 'When @query changes,'
          @query.text = 'on'

          @async ->
            expect(@todos, "#{DESCRIBE} retrieves and writes to @todo")
              .to.deep.equal [ {id: 'a', text: 'one', done: true} ]

            DESCRIBE = "Given a @query that doesn't match any items,"
            @query.text = 'z'

            @async ->
              expect(@todos, "#{DESCRIBE} writes [] to @todos")
                .to.deep.equal []

              done()
